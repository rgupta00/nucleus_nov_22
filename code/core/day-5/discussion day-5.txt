Core Java - Classes and Objects
- Static variables and Methods
- private Constructor
- Singleton Object
- inheritance 
- string class
- assignment tips






"change is the only constant in life"












-relationship bw the object
------------------

	"loose coupling and high cohesion"
	use a 

	Passanger ------------------- Metro


	is a

	has a

	Inheritance

	


	Employee

	FullTimeEmployee

    private  int id;
    private String name;
    private double salary;
    private LocalDate dateOfBirth;

	private String ppf;
	....................


	PartTimeEmployee
	
	private  int id;
    private String name;
    private double salary;
    private LocalDate dateOfBirth;

	private int noOfDaysWork;
	private double payPerDay;
	


public class Employee {
    private  int id;
    private String name;
    private double salary;
    private LocalDate dateOfBirth;

    private static int employeeCounter=0;

    //non static method can access this , static methnod can not access this
    public static int getEmployeeCounter(){
        return employeeCounter;
    }
   // public Employee(){}
    public Employee( String name, double salary, LocalDate dateOfBirth) {
        this.id = ++employeeCounter;
        this.name = name;
        this.salary = salary;
        this.dateOfBirth = dateOfBirth;
    }

    public  void printEmployeeDetails(){
        System.out.println("----------------------");
        System.out.println("id: "+ id);
        System.out.println("name: "+ name);
        System.out.println("salary: "+ salary);
        System.out.println("dob: "+ dateOfBirth);
        System.out.println("----------------------");
    }
}



public class FullTimeEmployee extends Employee{
  
    private String ppf;

    private static int employeeCounter=0;

    //non static method can access this , static methnod can not access this
    public static int getEmployeeCounter(){
        return employeeCounter;
    }
  
//

    public  void printEmployeeDetails(){
        
    }
}


public class PartTimeEmployee {
    private  int id;
    private String name;
    private double salary;
    private LocalDate dateOfBirth;
   
     private int noOfDaysWork;
	private double payPerDay;

    private static int employeeCounter=0;

    //non static method can access this , static methnod can not access this
    public static int getEmployeeCounter(){
        return employeeCounter;
    }
   // public Employee(){}
    public Employee( String name, double salary, LocalDate dateOfBirth) {
        this.id = ++employeeCounter;
        this.name = name;
        this.salary = salary;
        this.dateOfBirth = dateOfBirth;
    }

    public  void printEmployeeDetails(){
        System.out.println("----------------------");
        System.out.println("id: "+ id);
        System.out.println("name: "+ name);
        System.out.println("salary: "+ salary);
        System.out.println("dob: "+ dateOfBirth);
        System.out.println("----------------------");
    }
}










class A{
     private int i=0;

    public A(int i){
	this.i=i;
   }
    public void printI(){
        System.out.println(i);
    }
}


class B extends A{
    private int j=0;
    public  void printJ(){
        System.out.println(j);
    }
}
public class DemoInheritance {
    public static void main(String[] args) {

    }
}














- Polymorphism : Method Overloading
- String class
- finally keyword


* ctr cant return anything not even void
----------------------------------------
class Foo{

	Foo(){
	 sout("1");
	}

	void Foo(){
	sout("2");
	}

	psvm(....){
		new Foo().Foo();
	}

}

* ctr cant static : will not compile
-------------------------------------
class Foo{

	static Foo(){
	 sout("1");
	}

}



* private ctr: singleton design pattern
-------------------------------------
class Foo{
	private stataic Foo foo=new Foo();

	private Foo(){
	 sout("dare to call me!");
	}

	public static Foo getFooInstancce(){
		return foo;
	}

}


FooTester
--------
	Foo f=Foo.getFooInstancce();
	Foo f2=Foo.getFooInstancce();
	Foo f3=Foo.getFooInstancce();




class Foo{

	Foo(){
	 sout("1");
	}

	void Foo(){
	sout("2");
	}

	psvm(....){
		new Foo().Foo();
	}

}






class Foo{

	private  int i=55;

	public static void main(String args[]){
		i++;

		System.out.println(i);
	}

}



static data and method 












class Foo{

	public Foo abc(){
		
		return this;

	}

}


Foo f=new Foo();
	f.abc();










    private  int id;
    private String name;
    private double salary;
   

    private String ppf;
	

	
     private int noOfDaysWork;
     private double payPerDay;







funcation overloading:
---------------------

class Cal{

    int add(int a, int b){
        System.out.println("int add(int a, int b) ");
        return a+b;
    }

    int add(int a, int b, int c){
        System.out.println(" int add(int a, int b, int c)");
        return a+b+c;
    }

    int add(int ...a){
        System.out.println("int add(int ...a)");
        int sum=0;
        for(int temp: a){
            sum+=temp;
        }
        return sum;
    }
}

public class FunctionOverloading {

    public static void main(String[] args) {
        Cal cal=new Cal();
        int sum=cal.add(3,5,55,66);
        System.out.println(sum);
    }
}



now some time compiler can get confused: 
------------------------------------

class Cal{

    long add(long a, int b){
        System.out.println(" long add(long a, int b)");
        return a+b;
    }

    long add(int a, long b){
        System.out.println("long add(int a, long b)");
        return a+b;
    }
}

public class FunctionOverloading {

    public static void main(String[] args) {
        Cal cal=new Cal();
        long sum=cal.add(3L,5);
        System.out.println(sum);
    }
}




------------------------------------

java is strongly typed lanaguage

long i=9;

int j=i;







Agenda: day 4
------------
Quick revision

constructor,init block static init block
static data and methods
singleton design pattern
overloading
overriding
inheritane type of inheritance
abstract class vs interface, when to use what
concept of package and visibility specifier
shadowning concept
Concept of Upcasting and Downcasting
Concept of is-a and has-a relationship
String , stringbuilder stringbuffer etc performance
String class, regex basics
assignment hints




constructor
--------------
1. ctr have same name as of class
2. can not return anything

class A{
	A(){}

}


class A{
	void A(){} //it is a normal method

}

3. can not be static 

this will not compile

class A{
	static  A(){
		sout("hello");
	}

}



this will  compile

class A{
	static void A(){
		sout("hello");
	}

}


not compile
class A{
	abtract  A();

}




not compile
class A{
	abtract  A(){
		sout("hello");
	}

}

ctr can be private
------------------

class A{
	private static A a=new A();

	public static A getAInance(){
		return a;
	}
	private A(){
		sout("call me if u can");
	}

}

Demo
-----
A a=A.getAInance();
sout(a.hashCode());	4t566656

A a2=A.getAInance();
sout(a2.hashCode());	4t566656


static 								vs instance variable:
---------------------------

method area along with temple of class				heap along with the object
can be acess with normal and static method			can be acess only with normal  method


constructor
------------------------------------

constructor chaining

class A{
	int i;
	A(){
		this(66);
	}
	A(int i){
		A();
		this.i=i;
	}

}

Main
------
	A a=new A();
	sout(a.i);



init block static init block
----------------------------

DRY 

class A{
	int i;

	{
		//data conn
		//
		//
	}

	A(){
		
		
	}
	A(int i){
		
		this.i=i;
	}

}

Main
------
	A a=new A();
	sout(a.i);





class A{
    int i;

    static {
        System.out.println("static init block");
    }

    {
        System.out.println("common code 2");
    }

    {
        System.out.println("common code 1");
    }


    A(){

        System.out.println("it is a default ctr");
    }
    A(int i){

        System.out.println("it is a para ctr");
        this.i=i;
    }
    void foo(){
        System.out.println("hello");
    }
}

public class A_CtrEx {
    public static void main(String[] args) {
        A a=new A();
        A a1=new A(77);
        a.foo();
        //System.out.println(a.i);
    }
}












overriding , shadowing, static method dont support overring, 
--------
class A{
    void foo(){
        System.out.println("I");
    }
}

class B extends A{
   @Override
    void foo(){
        System.out.println("2");
    }

}
public class A_CtrEx {
    public static void main(String[] args) {
        A a=new B();
        a.foo();
    }
}



static method dont support overring
---------------------------------

    class A{
        static  void foo(){
            System.out.println("I");
        }
    }

    class B extends A{
        static  void foo(){
            System.out.println("2");
        }

    }
    public class A_CtrEx {
        public static void main(String[] args) {
            B a=new B();
            a.foo();
        }
    }


inheritane type of inheritance
--------------------------
extends

final: class, method, varibale final

abstract class vs interface, when to use what



 class  Emp{
    private  int id;
    private String name;

    private  double salary;

    public Emp(int id, String name, double salary){
        this.id=id;
        this.name=name;
        this.salary=salary;
    }
     public int getId() {
         return id;
     }

     public void setId(int id) {
         this.id = id;
     }

     public String getName() {
         return name;
     }

     public double getSalary() {
         return salary;
     }

     public void setSalary(double salary) {
         this.salary = salary;
     }

     public void setName(String name) {
         this.name = name;
     }
     public  void print(){
         System.out.println("id :"+ id + " name: "+ name+" salary : "+ salary);
     }
 }

    public class A_CtrEx {
        private static  final int i=77;
        public static void main(String[] args) {
            final  Emp e=new Emp(55,"raj",8000);
            //e=new Emp(44, "rajesh");
            e.print();
            e.setName("rajiv");
            e.print();
        }

        public static void processSalary(final  Emp e){
           // e=null;
        }
    }



abstract class vs interface
--------------------------



public class Employee {
    private Integer id; //5 digits
    private String name;// should not be null
    private double salary;//should not be null > 56000
    private String phoneNumber;//...
    private String emailId;
    private LocalDate dateOfBirth;
    private String dept;//IT, SALES, HR
}



public class Validation {
    private Validation(){}
    public static  boolean isValidId(Integer id){
        return id.toString().length()==5;
    }

    //IT, SALES, HR, FIN
    public static boolean isValidDept(String  deptName){
        if(deptName==null)
            return  false;
        return  deptName.matches("IT|SALES|HR|FIN");
    }

    public static boolean isValidPhoneNumber(String  phoneNumber){
        if(phoneNumber==null)
            return  false;

        return  phoneNumber.matches("(0|91)?[6-9][0-9]{9}");

    }

}

Employee employee=
                new Employee(55444,"raj",78000,"9958543978","raj@gmail.com",
                        LocalDate.of(1979, Month.NOVEMBER,11),"IT");

        employee.print();






 class A{

	public int foo(){
		return 123;
	}
}


 class B extends A{

	 int foo(){
		return 127;
	}
}

class Demo
-------------
A a=new B();
sout(a.foo());



interface A{
	int i=0;
	int foo();
}


 class B{

	public int abc(){
		return 123;
	}
}



class C implements A extends B{

	public int foo(){
		return 127;
	}
}



interface A{
}









Core Java day :5
-----------------
- string class, stringbuilder, stringbuffer performane, validation examples
- wrapper classes, immutability
- java 5 features: enhance for loop, varargs, covarient return type,static import , enums

call by value and call by ref






clone() we discussion with method of object class

- composition and aggrigation examples
- exception handing basics, try catch throw throws finally



enum
covarient return type
static import






public class Employee {
    private Integer id; 
    private String name;
    private double salary;
    private String gender;
}





public class Shirt {
    private Integer id; 
    private String color;
    private int size;
}

















	








