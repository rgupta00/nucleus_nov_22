Java 8 notes:
main motivate : declrative data processing just like  SQl

for that Stream processing <----- lambada<---- funcational inteface <-- inteface evaluation


what is interface evaluation (juddad)

interface Foo{
	public void foo();
	//1
	public default void bar(){
		System.out.println("default method bar of Foo inteface");
	}
	//2
	public static void fooStatic(){
		System.out.println("i am static fooStatic method inside foo");
	}
	//3
	private void fooPrivate(){
		//act as a helper method for default method
		System.out.println("i am private method insise inteface java 9 ?");
	}
}


now interface is not 100% abstraction
now diamond problem is possible in java while using interface


	


What is the behaviour of default method:
-------------------------------

interface Foo{
	public void foo();
	//1
	public default void bar(){
		System.out.println("default method bar of Foo inteface");
	}
}
class FooImpl implements Foo{
	@Override
	public void foo() {
		System.out.println("foo overrend by FooImpl");
	}
}
public class DemoFuncationalInterface {
	public static void main(String[] args) {
		//What is interface evoluation?
		Foo foo=new FooImpl();
		foo.bar();

	}
}

* now bar() method is not mandatory to be overen by FooImpl
 but still he req u can do it


interface Foo{
	public void foo();
	//1
	public default void bar(){
		System.out.println("default method bar of Foo inteface");
	}
}
class FooImpl implements Foo{
	@Override
	public void foo() {
		System.out.println("foo overrend by FooImpl");
	}
       public void bar(){
		System.out.println("default method bar of Foo inteface is overrien");
	}
}
public class DemoFuncationalInterface {
	public static void main(String[] args) {
		//What is interface evoluation?
		Foo foo=new FooImpl();
		foo.bar();
	}
}



why diamond problem come up with java 8:
------------------------------------

interface Foo1{
	public default void bar(){
		System.out.println("default method bar of Foo1 inteface");
	}
}


interface Foo2{
	public default void bar(){
		System.out.println("default method bar of Foo2 inteface");
	}
}


//this code will not compile as compiler get confussed
class MyImpl implements Foo1, Foo2{
     
	
}




//the solution is to define bar() inside MyIMpl1 (dont forget to remove default KW)

class MyImpl implements Foo1, Foo2{
     public void bar(){
		System.out.println("some new behaviour");
	}
	
}




how to call default method of parent interface Foo.super.methodName()
-------------------------------------------------

interface Foo1{
	public default void bar(){
		System.out.println("default method bar of Foo1 inteface");
	}
}
interface Foo2{
	public default void bar(){
		System.out.println("default method bar of Foo2 inteface");
	}
}
//this code will not compile as compiler get confussed
class MyImpl implements Foo1, Foo2{
	@Override
	public  void bar(){
		Foo1.super.bar();//how to call interface default method 
		Foo2.super.bar();
		System.out.println("overren method");
	}
}


what about static method inside the interface:
---------------------------------------

interface Foo1{
	public static void bar(){
		System.out.println("static method bar");
	}
}


interface FooImp implents Foo1{
	
}


Foo1 f=new FooImp();
f.bar(); //IT WILL NOT WROK

//THEN WHAT WILL WORK?
Foo1.bar()// it work



what about ?
---------

interface Foo1{
	public static void bar(){
		System.out.println("static method bar");
	}
}
interface Foo2 extends Foo1{
	public static void bar2(){
		System.out.println("static method bar 2");
	}
}

public class DemoFuncationalInterface {
	public static void main(String[] args) {
	Foo2.bar2();
 }
}

not since java 9 we can have private method inside the interface:
-----------------------------------------------------------------

why: DRY

interface Foo1{
	public void default function1(){
		//code line no 1
		// code line specific to function1
		//code line no 3

	}

	public void default function2(){
		//code line no 1
		// code line specific to function2
		//code line no 3

	}
	
	
}

now how to avoide voilating DRY ?
----------------------------------



why: DRY

interface Foo1{
	public void default function1(){
		commonCodeForLine1();
		// code line specific to function1
		commonCodeForLine2();

	}

	public void default function2(){
		commonCodeForLine1();
		// code line specific to function2
		commonCodeForLine2();

	}
	private void commonCodeForLine1(){
		//code line no 1
	}

	private void commonCodeForLine2(){
		//code line no 2
	}

	//we can define a private method inside the interface that can act 
	//as a assistent of default method 
	
}

	private helper method can also help other static method of that interface

//-----------------------

interface Foo1{
	public static void fooStatic(){
		commonCodeForLine1();
	}
	public default void  function1(){
		commonCodeForLine1();
		// code line specific to function1
		commonCodeForLine2();

	}

	public  default void function2(){
		commonCodeForLine1();
		// code line specific to function2
		commonCodeForLine2();

	}
	private static void commonCodeForLine1(){
		//code line no 1
	}

	private  void commonCodeForLine2(){
		//code line no 2
	}

	//we can define a private method inside the interface that can act
	//as a assistent of default method

}
class FooImp implements Foo1{

}



funcational inteface: java concept to supporot funcatinal programming

--------------------
imparitive lanaguage , OOPs

	"funcational programming"= programming approach 
	that support declative data processing
 	old concept since 1960

		https://en.wikipedia.org/wiki/Functional_programming
	it have some attribute

		1. it keep data immutable (hence data is thread safe*)
				so that its application more scable as (syn have limiation)
					if we want to do || processing
					then it is a best solution

		2. higher order fun as in js
			C funcation pointer

		3. currying just like funcatin chaining

		/...


	only funcational inteface support a concept lambada expression

	lambada expression support stream processing


What is funcation interface:
------------------------

//A interface is stb FI iff it have only one abstract method  SAM

@FunctionalInterface
interface MyInnterface{
    void foo();
   default  void foo2(){
       System.out.println("default foo2 method");
   }
    static  void fooStack(){
        System.out.println("default foo2 method");
    }
    private   void foo2Methods(){
        System.out.println("this is some private method inside the interface");
    }
    
}





interface A{
	void foo();
}


A a=new A(){
	public void foo(){

	}

};




how java works under the hood?
----------------------------

https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood/


  //"Type inference": actaully what is means taht now ref is pointing to peice of code
        //very similer to js
//        let a=function(){
//
//        }
        MyInnterface myInnterface=() ->{
                System.out.println("hello");

        };
        MyInnterface myInnterface2=() ->{
            System.out.println("hello");

        };




      //very imp diff bw ann inner classs and lamanbd
        //lambada dont have its own this* while ann inner class have its own this
        
        MyInnterface myInnterface=() -> System.out.println("hello");

        myInnterface.foo();



how to refector the code from ann inner class to lambda step by step
----------------------------------------------------------
//        Comparator<Employee>  comparator=new Comparator<Employee>() {
//            @Override
//            public int compare(Employee o1, Employee o2) {
//                return Double.compare(o2.getSalary(), o1.getSalary());
//            }
//        };

//        Comparator<Employee>  comparator=(Employee o1, Employee o2) ->{
//                return Double.compare(o2.getSalary(), o1.getSalary());
//            
//        };
//        Comparator<Employee>  comparator=(Employee o1, Employee o2) ->
//                Double.compare(o2.getSalary(), o1.getSalary());

//        Comparator<Employee>  comparator=( o1,  o2) ->
//                Double.compare(o2.getSalary(), o1.getSalary());

        Comparator.comparing(Employee::getSalary).reversed();




//lambda   -> vs method ref Employee::getSalary
        //method ref is a syntex supger on lambda
        



Predicate:
-----------



        //either even or more then 100

        Predicate<Integer> evenPredicate= no-> no%2==0;

        Predicate<Integer> moreThe100Predicate= no->no>100;

        Predicate<Integer> p3=evenPredicate.and(moreThe100Predicate).negate();

        System.out.println(p3.test(121));

        //predicate for rich emp salary > 50L

        Predicate<Employee> employeePredicate= e -> e.getSalary()>=50_000_00;

        //e1 , e2 if e1 have more salary then e2 then retrun e1 or else e2
        BiPredicate<Employee, Employee> employeeEmployeeBiPredicate=
               ( employee1,  employee2) -> employee1.getSalary()> employee2.getSalary();


        Employee e1=new Employee(1,"raj",50_000_00);
        Employee e2=new Employee(18,"sumit",34_000_00);


        boolean flag =employeeEmployeeBiPredicate.test(e1, e2);
        System.out.println(flag);

        //how it can appled to list of emp *







how to stay positive?




--------------------------
Day 15:
--------------------------

=> revision : keep doing it :)


public class B_WhatIsFI {
    public static void main(String[] args) {


        //FI: Predicate
//        Predicate<Integer> p1= no-> no%2==0;
//        Predicate<Integer> p2=no->no>100;
//        Predicate<Integer> p3=p1.and(p2);
//        System.out.println(p3.test(121));

    //    BiPredicate<Integer, Integer> p4=( x,  y)-> x>y;

//        Predicate<Employee> p5=e-> e.getSalary()>5_000_000;
//
//        Employee e= new Employee(1,"raj",8_000_00);
//        System.out.println(p5.test(e));

        //Employee -> salary
        Function<Employee, Double> f1= e-> e.getSalary();
        //Employee -> EmployeeData

        Employee e2= new Employee(1,"raj",8_000_00);
        Function<Employee, EmployeeData> f2= e-> new EmployeeData(e.getId(), e.getSalary());

        //we want the net saalry of emp
    /*
     public Emp(int id, String name, double hra, double ta, double da, double commission,
               double carAllowencce, double reallocation, double monthlySalary) {
     */
        Emp e=new Emp(1,"raj",12000,10000, 2000,
                30000, 10000,23000,
                23000 );
        System.out.println(e);

        //Emp -> EmpDto
//        Function<Emp, EmpDto> f3= emp->
//                new EmpDto(emp.getName(), emp.netSalaray());
//
//        EmpDto empDto=f3.apply(e);
//        System.out.println(empDto);

        Consumer<String> c= s ->System.out.println(s);
        
        Consumer<Emp> c2=e3-> System.out.println(e3);

        //used for map
        BiConsumer<String, Integer> c3=(x,y)-> System.out.println(x+" : "+y);
        

    }
}






Behavioural paramerrization:
-----------------------------
Apple example:


public class Apple {
	private String color;
	private int weight;
	//			boolean				T(this)
	public static boolean isHeavyApple(Apple apple){
		return apple.getWeight()>=350;
	}
	public static boolean isGeenApple(Apple apple){
		return apple.getColor().equals("green");
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public int getWeight() {
		return weight;
	}

	public void setWeight(int weight) {
		this.weight = weight;
	}

	public Apple(String color, int weight) {
		this.color = color;
		this.weight = weight;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder("Apple{");
		sb.append("color='").append(color).append('\'');
		sb.append(", weight=").append(weight);
		sb.append('}');
		return sb.toString();
	}

	public Apple() {
	}

}

public class AppleApp {
    public static List<Apple> getAllApplesOnPredicate(List<Apple> apples,
                                               Predicate<Apple> applePredicate){
        return apples.stream().filter(applePredicate).collect(toList());
    }


//    public List<Apple> getAllGreenApples(List<Apple> apples){
//        List<Apple> tempApples=new ArrayList<>();
//        for (Apple temp: apples){
//            if(temp.getColor().equals("green"))
//                tempApples.add(temp);
//        }
//        return tempApples;
//    }

//    public List<Apple> getAllHeavyApples(List<Apple> apples){
//        List<Apple> tempApples=new ArrayList<>();
//        for (Apple temp: apples){
//            if(temp.getWeight()>=300)
//                tempApples.add(temp);
//        }
//        return tempApples;
//    }
}



public class AppleTester {

		
		public static void main(String[] args) {

		List<Apple> apples = Arrays.asList(
				new Apple("red", 400),
				new Apple("green", 450),
				new Apple("green", 300),
				new Apple("green", 200),
				new Apple("red", 250));


//		Predicate<Apple> greenApplePredicate=a-> a.getColor().equals("green");
//
	Predicate<Apple> greenApplePredicate=Apple::isGeenApple;

		List<Apple> geenAppleList=
				AppleApp.getAllApplesOnPredicate(apples, greenApplePredicate);
			geenAppleList.forEach(a-> System.out.println(a));

			//Predicate<Apple> heavyApplePredicate=a-> a.getWeight()>=350;

			Predicate<Apple> heavyApplePredicate=Apple::isHeavyApple;


			System.out.println("------all heavy apples-------");
			List<Apple> heavyAppleList=
					AppleApp.getAllApplesOnPredicate(apples, heavyApplePredicate);
			heavyAppleList.forEach(a-> System.out.println(a));

			//i want all heavy and green apples
			System.out.println("i want all heavy and green apples");
			Predicate<Apple> allHeavayAndGreenApplePredicate=
					heavyApplePredicate.and(greenApplePredicate);

			List<Apple>allHeavayAndGreenAppleList
					=AppleApp.getAllApplesOnPredicate(apples,
					allHeavayAndGreenApplePredicate);

			allHeavayAndGreenAppleList.forEach(a-> System.out.println(a));

}







very imp question freq in java 8:
----------------------------
how to iterate through map:
//https://javarevisited.blogspot.com/2017/09/java-8-sorting-hashmap-by-values-in.html#axzz7mC957T1M
--------------------------------


package com.day1.session2.ex3;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import  static java.util.Comparator.*;
class Product implements Comparable<Product>{
    private int id;
    private String name;
    private double price;


    public Product(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Product{");
        sb.append("id=").append(id);
        sb.append(", name='").append(name).append('\'');
        sb.append(", price=").append(price);
        sb.append('}');
        return sb.toString();
    }

    @Override
    public int compareTo(Product o) {
        return Integer.compare(this.getId(), o.getId());
    }
}

public class IteratingMapWithUserDefineOb {
    public static void main(String[] args) {

        //biConsumer
        Map<Product, Double> map=new HashMap<>();
        map.put(new Product(77,"cool pad",900.00),2.6);
        map.put(new Product(1,"laptop",78000.00),4.5);


//      map.entrySet()
//              .stream()
//              .sorted(Map.Entry.comparingByKey(( o1,  o2)->
//                      Double.compare(o2.getPrice(), o1.getPrice())))
//              .forEach(e-> System.out.println(e.getKey()+" : "+ e.getValue()));


        Comparator<Product> comparator=
                Comparator.comparing(Product::getPrice).reversed();

        //how to do it with method ref
        map.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByKey( comparing(Product::getPrice).reversed()))
                .forEach(e-> System.out.println(e.getKey()+" : "+ e.getValue()));



        //how to iterate map in java 8 syntex
      //  map.forEach(( k,  v)-> System.out.println(k+" : "+ v));
        //print the map sorted as per key
//        map.entrySet().stream()
//                .forEach(new Consumer<Map.Entry<String, Integer>>() {
//                    @Override
//                    public void accept(Map.Entry<String, Integer> e) {
//                        System.out.println(e.getKey()+" : "+ e.getValue());
//                    }
//                });

//        map.entrySet()
//                .stream()
//                .sorted(Map.Entry.comparingByKey())
//                .forEach( e -> System.out.println(e.getKey()+" : "+ e.getValue()));

        //print the map sorted as per value

        //.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
        //reveres sort?
//        map.entrySet()
//                .stream()
////                .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
//                .sorted(Map.Entry.comparingByValue(Collections.reverseOrder()))
//                .forEach( e -> System.out.println(e.getKey()+" : "+ e.getValue()));




    }
}





Optional in java 8:
-----------------
























































		Collection

	List			Set			


Collections.sort




















