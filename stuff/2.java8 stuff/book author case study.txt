Book application case study:
-----------------------------
Domain model:

enum Subject{
	JAVA, DOT_NET, ORACLE;
}

class Author {
	private String name;
	private String lastname;
	private String country;
}



class Book {

	private String title;
	private List<Author> authors;
	private int pages;
	private Subject subject;
	private int year;
	private String isbn;
}





Problems:
----------
1. Find books with more then 400 pages

2. Find all books that are java books and more then 400 pages

3. We need the top three longest books

4. We need from the fourth to the last longest books

5. We need to get all the publishing years

6. We need all the authors who have written a book















// Find books with more then 400 pages
-----------------------------------------
	List<Book> largeBooks = books.
					stream()
					.filter(b -> b.getPages() > 400)
						.collect(Collectors.toList());


















// Find all books that are java books and more then 400 pages
----------------------------------------------------------------

		List<Book> largeJavaBooks = books.stream()
				.filter(b -> b.getPages() > 400 && Subject.JAVA == b.getSubject())
				.collect(Collectors.toList());






















// Find books with more then 400 pages
----------------------------------------
	List<Book> largeBooks = books
				.stream()
					.filter(b -> b.getPages() > 400)
						.collect(Collectors.toList());

















// Find all books that are java books and more then 400 pages
--------------------------------------------------------------

	List<Book> largeJavaBooks = books.stream()
				.filter(b -> b.getPages() > 400 && Subject.JAVA == b.getSubject())
					.collect(Collectors.toList());






















// We need the top three longest books
--------------------------------------------------------------
	List<Book> top3LongBooks = books.stream()
				.sorted((b1, b2) -> b2.getPages() - b1.getPages()).limit(3)
					.collect(Collectors.toList());

		























// We need from the fourth to the last longest books
--------------------------------------------------------------
	List<Book> from4thToLastLongBooks = books.stream()
				.sorted((b1, b2) -> b2.getPages() - b1.getPages())
					.skip(3)
						.collect(Collectors.toList());

		

























// We need to get all the publishing years
---------------------------------------------
	List<Integer> publishYear = books.stream().map(b -> b.getYear())
					.distinct()
						.collect(Collectors.toList());



























// We need all the authors who have written a book
---------------------------------------------

	List<Author> authors2 = books.stream()
				.flatMap(b -> b.getAuthors()
					.stream())
						.distinct()
							.collect(Collectors.toList());



























// We need all the origin countries of the authors
----------------------------------------------------

	Set<String> getCountriresOfAuthors = books.stream()
				.flatMap(b -> b.getAuthors().stream())
					.map(a -> a.getCountry())
						.distinct()
							.collect(Collectors.toSet());






















// We want the most recent published book.
----------------------------------------------------

	Optional<Book> bookRecent = books.stream()
			.min(Comparator.comparing(Book::getYear));

























// We want to know if all the books are written by more than one author
--------------------------------------------------------------------------
	boolean isAllBooksWrittenBy2Author = books.stream().
					 allMatch(b -> b.getAuthors().size() > 1);



























We want one of the books written by more than one author.
---------------------------------------------------------

		Optional<Book> multiAuthorBook = books.stream()
				.filter(b -> b.getAuthors().size() > 1)
					.findAny();

























// We want the total number of pages published.
----------------------------------------------------

	Integer totalPubPages = books.stream()
					.map(b -> b.getPages())
						.reduce(0, (a, b) -> a + b);

























// We want to know how many pages the longest book has.
----------------------------------------------------

	Optional<Integer> longestBook = books.stream()
				.map(b -> b.getPages())
					.reduce(Integer::max);
























// We want the average number of pages of the books
----------------------------------------------------
	Double avgPages = books.stream()
				.collect(Collectors.averagingDouble(Book::getPages));


























// We want all the titles of the books
--------------------------------------

	String title = books.stream()
				.map(b -> b.getTitle())
					.collect(Collectors.joining(" "));
























// We want the book with the higher number of authors?
----------------------------------------------------

	Optional<Book>bookWrittenByHighestAuthors=books.stream().
		 collect(Collectors.maxBy(Comparator.comparing(b->b.getAuthor().size())));



























We want a Map of book per year.
-------------------------------

		Map<Integer, List<Book>> yearBooks = books.stream()
						.collect(Collectors.groupingBy(Book::getYear));


























We want a Map of how many books are published per year per SUBJECT
--------------------------------------------------------------------

	Map<Integer, Map<Subject, List<Book>>> map = books.stream()
			.collect(Collectors.groupingBy(Book::getYear),
					Collectors.groupingBy(Book::getSubject));
		
























We want to count how many books are published per year.
--------------------------------------------------------

		Map<Integer, Long>yearBooks1=books.stream()
				.collect(Collectors.groupingBy(Book::getYear, Collectors.counting()));
		























We want to count how many books are published per year.
----------------------------------------------------

	Map<Boolean, List<Book>>hardCoverBooks=books.stream()
				.collect(Collectors.partitioningBy(Book::hasHardCover));
		
